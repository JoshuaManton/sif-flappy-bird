#foreign_import "lib/stb_truetype.lib"

//////////////////////////////////////////////////////////////////////////////
//
// TEXTURE BAKING API
//
// If you use this API, you only have to call two functions ever.
//

struct stbtt_bakedchar {
   x0: u16;
   y0: u16;
   x1: u16;
   y1: u16; // coordinates of bbox in bitmap
   xoff: f32;
   yoff: f32;
   xadvance: f32;
}

struct stbtt_aligned_quad {
    x0: f32;
    y0: f32;
    s0: f32;
    t0: f32;
    // top-left
    x1: f32;
    y1: f32;
    s1: f32;
    t1: f32;
    // bottom-right
}

const Baked_Char   := stbtt_bakedchar;
const Aligned_Quad := stbtt_aligned_quad;

// bindings
proc stbtt_BakeFontBitmap(data: ^u8, offset: i32, pixel_height: f32, pixels: ^u8, pw: i32, ph: i32, first_char: i32, num_chars: i32, chardata: ^stbtt_bakedchar) : i32 #foreign;
proc stbtt_GetBakedQuad(chardata: ^stbtt_bakedchar, pw: i32, ph: i32, char_index: i32, xpos: ^f32, ypos: ^f32, q: ^stbtt_aligned_quad, opengl_fillrule: i32) #foreign;

// wrappers
// proc bake_font_bitmap(data: []u8, offset: int, pixel_height: f32, pixels: []u8, pw, ph, first_char, num_chars: int) -> ([]Baked_Char, int) {
//     chardata := make([]Baked_Char, num_chars);
//     ret := stbtt_BakeFontBitmap(&data[0], i32(offset), pixel_height, &pixels[0], i32(pw), i32(ph), i32(first_char), i32(num_chars), cast(^stbtt_bakedchar)&chardata[0]);
//     return chardata, int(ret);
// }

// proc get_baked_quad(chardata: []Baked_Char, pw, ph, char_index: int, xpos, ypos: ^f32, opengl_fillrule: bool) -> (q: Aligned_Quad) {
//     stbtt_GetBakedQuad(cast(^stbtt_bakedchar)&chardata[0], i32(pw), i32(ph), i32(char_index), xpos, ypos, &q, i32(opengl_fillrule));
//     return Aligned_Quad(q);
// }
