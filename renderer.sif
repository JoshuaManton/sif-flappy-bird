struct Vertex {
    position: Vector3;
    uv:       Vector3;
    color:    Vector4;
}

struct Model {
    allocator: Allocator;
    triangle_list_infos: []Triangle_List_Info;
    vertex_buffer: Vertex_Buffer;
    index_buffer: Index_Buffer;
    vertices: []Vertex;
    indices:  []u32;
}

struct Triangle_List_Info {
    first_vertex: int;
    vertex_count: int;
    has_indices: bool;
    first_index: int;
    index_count: int;

    // material:      PBR_Material;
    // has_material:  bool;
}

struct Render_Pass_Constant_Buffer {
    screen_dimensions: Vector2;
    pad1: [2]float;
    view_matrix: Matrix4;
    projection_matrix: Matrix4;
    camera_position: Vector3;
    pad2: [1]float;
}

struct Model_Constant_Buffer {
    model: Matrix4;
    color: Vector4;
}

g_quad_model: Model;

g_model_cbuffer_handle:       Constant_Buffer;
g_render_pass_cbuffer_handle: Constant_Buffer;

g_vertex_shader:         ^ID3D11VertexShader;
g_pixel_shader:          ^ID3D11PixelShader;
g_pixel_shader_textured: ^ID3D11PixelShader;
g_text_pixel_shader:     ^ID3D11PixelShader;

g_white_texture: Texture;
g_black_texture: Texture;

g_vertex_format: ^ID3D11InputLayout;

g_roboto: Font;

g_plane_texture_1:     Texture;
g_plane_texture_2:     Texture;
g_plane_texture_3:     Texture;
g_rock_bottom_texture: Texture;
g_rock_top_texture:    Texture;
g_foreground_texture:  Texture;
g_background_texture:  Texture;

proc init_renderer() {
    vertex_shader_blob: ^ID3D10Blob;
    g_vertex_shader         = compile_vertex_shader_from_file("resources/shaders/basic_vertex.hlsl", &vertex_shader_blob, default_allocator());
    g_pixel_shader          = compile_pixel_shader_from_file("resources/shaders/basic_pixel.hlsl", default_allocator());
    g_pixel_shader_textured = compile_pixel_shader_from_file("resources/shaders/basic_pixel_textured.hlsl", default_allocator());
    g_text_pixel_shader     = compile_pixel_shader_from_file("resources/shaders/text_pixel.hlsl", default_allocator());

    white_texture_desc: Texture_Description;
    white_texture_desc.width = 1;
    white_texture_desc.height = 1;
    white_texture_desc.format = .R8G8B8A8_UINT;
    white_texture_pixel := [4]byte.{255, 255, 255, 255};
    white_texture_desc.color_data = &white_texture_pixel[0];
    g_white_texture = create_texture(white_texture_desc);

    black_texture_desc: Texture_Description;
    black_texture_desc.width = 1;
    black_texture_desc.height = 1;
    black_texture_desc.format = .R8G8B8A8_UINT;
    black_texture_pixel := [4]byte.{0, 0, 0, 255};
    black_texture_desc.color_data = &black_texture_pixel[0];
    g_black_texture = create_texture(black_texture_desc);

    vertex_fields := [3]D3D11_INPUT_ELEMENT_DESC.{
        .{"SV_POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT,    0, 0,  D3D11_INPUT_PER_VERTEX_DATA, 0},
        .{"TEXCOORD",    0, DXGI_FORMAT_R32G32B32_FLOAT,    0, 12, D3D11_INPUT_PER_VERTEX_DATA, 0},
        .{"COLOR",       0, DXGI_FORMAT_R32G32B32A32_FLOAT, 0, 24, D3D11_INPUT_PER_VERTEX_DATA, 0},
    };

    result := directx_device.CreateInputLayout(directx_device, &vertex_fields[0], 3, vertex_shader_blob.GetBufferPointer(vertex_shader_blob), vertex_shader_blob.GetBufferSize(vertex_shader_blob), &g_vertex_format);
    assert(result == S_OK);
    vertex_shader_blob.Release(vertex_shader_blob);

    g_quad_model = create_quad_model(default_allocator());

    g_model_cbuffer_handle = create_constant_buffer(null, sizeof(Model_Constant_Buffer));
    g_render_pass_cbuffer_handle = create_constant_buffer(null, sizeof(Render_Pass_Constant_Buffer));

    g_roboto = load_font_from_file("resources/fonts/roboto.ttf", 64, default_allocator());

    assert(load_texture_from_file("resources/plane1.png",      &g_plane_texture_1));
    assert(load_texture_from_file("resources/plane2.png",      &g_plane_texture_2));
    assert(load_texture_from_file("resources/plane3.png",      &g_plane_texture_3));
    assert(load_texture_from_file("resources/rock_bottom.png", &g_rock_bottom_texture));
    assert(load_texture_from_file("resources/rock_top.png",    &g_rock_top_texture));
    assert(load_texture_from_file("resources/foreground.png",  &g_foreground_texture));
    assert(load_texture_from_file("resources/background.png",  &g_background_texture));
}

proc draw_game(window: ^Window, manager: ^Entity_Manager, camera: ^Camera, colliders: ^Dynamic_Array!(Collider_Data)) {
    ensure_swap_chain_size(window.width, window.height);

    bindings: Render_Target_Bindings;
    bindings.color_bindings[0] = .{.{}, true, .{0.39, 0.58, 0.93, 1}};
    bindings.depth_binding     = .{.{}, true, 1};
    set_render_targets(bindings);

    render_pass_cbuffer: Render_Pass_Constant_Buffer;
    render_pass_cbuffer.screen_dimensions = window.size;
    render_pass_cbuffer.view_matrix       = construct_view_matrix(camera.position, camera.orientation);
    render_pass_cbuffer.projection_matrix = construct_camera_projection_matrix(camera, window.size.x / window.size.y);
    render_pass_cbuffer.camera_position   = camera.position;
    update_constant_buffer(g_render_pass_cbuffer_handle, &render_pass_cbuffer, sizeof(Render_Pass_Constant_Buffer));

    bind_constant_buffers(slice_ptr(&g_render_pass_cbuffer_handle, 1), 0);
    bind_constant_buffers(slice_ptr(&g_model_cbuffer_handle,     1), 1);

    directx_device_context.IASetInputLayout(directx_device_context, g_vertex_format);

    set_viewport(0, 0, cast(f32, window.width), cast(f32, window.height), 0, 1);
    set_depth_test(true);
    set_rasterizer_mode(.BACKFACE_CULL);
    set_blend_mode(.DEFAULT);
    set_primitive_topology(.TRIANGLE_LIST);

    ff_array := make_dynamic_array(Vertex, 10 * 1024, g_temp_allocator);
    ff: Fixed_Function;
    ff_begin(&ff, &ff_array);
    defer ff_end(&ff);

    // draw entities
    {
        sorted := new_slice(Entity, manager.all_entities.count, g_temp_allocator);
        copy_slice(sorted, manager.all_entities);

        proc sort_proc(a: Entity, b: Entity) : int {
            if (a.position.z > b.position.z) {
                return -1;
            }
            return 1;
        }

        quick_sort(sorted, sort_proc);

        for (i := 0; i < sorted.count; i += 1) {
            entity := &sorted[i];
            if (entity.id == 0) {
                continue;
            }

            if (entity.texture.valid) {
                bind_shaders(g_vertex_shader, g_pixel_shader_textured);
                bind_texture(entity.texture, 0);
                draw_model(g_quad_model, entity.position, entity.scale, entity.orientation, .{1, 1, 1, 1});
            }
        }
    }

    set_depth_test(false);

    // draw colliders
    {
        bind_shaders(g_vertex_shader, g_pixel_shader);
        bind_texture(.{}, 0);
        for (i := 0; i < colliders.count; i += 1) {
            collider := colliders^[i];
            half_size := collider.size / 2;
            min := collider.pos-half_size;
            max := collider.pos+half_size;
            // ff_quad(&ff, .{min.x, min.y, 0}, .{max.x, max.y, 0}, .{1, 0, 0, 0.25});
        }
        ff_flush(&ff);
    }

    ui_pass_cbuffer: Render_Pass_Constant_Buffer;
    ui_pass_cbuffer.screen_dimensions = window.size;
    ui_pass_cbuffer.view_matrix       = construct_view_matrix(.{0, 0, 0}, Quaternion.identity());
    ui_pass_cbuffer.projection_matrix = construct_orthographic_matrix(0, window.size.x, 0, window.size.y, -1, 1);
    ui_pass_cbuffer.camera_position   = .{0, 0, 0};
    update_constant_buffer(g_render_pass_cbuffer_handle, &ui_pass_cbuffer, sizeof(Render_Pass_Constant_Buffer));

    // draw score
    {
        bind_shaders(g_vertex_shader, g_pixel_shader);
        bind_texture(.{}, 0);
        top_center_of_screen := Vector3.{cast(float, cast(int, window.size.x/2)), cast(float, cast(int, window.size.y)), 0};
        ff_quad(&ff, top_center_of_screen + Vector3.{-50, -100, 0}, top_center_of_screen + Vector3.{50, 0, 0}, .{0.9, 0.8, 0.05, 1});
        ff_flush(&ff);

        bind_shaders(g_vertex_shader, g_text_pixel_shader);
        bind_texture(g_roboto.texture, 0);
        score_buffer: [4]byte;
        str := string_ptr(&score_buffer[0], bprint(to_slice(&score_buffer), "%", manager.gameplay_state.current_score));
        str_width := get_string_width(str, g_roboto, 1);
        str_pos := top_center_of_screen - Vector3.{cast(float, cast(int, str_width/2)), 70, 0};
        ff_text(&ff, str, g_roboto, .{0, 0, 0, 1}, str_pos - Vector3.{-1, 1, 0}, 1);
        ff_text(&ff, str, g_roboto, .{1, 1, 1, 1}, str_pos,                      1);
        ff_flush(&ff);
    }

    // draw controls
    {
        cursor := Vector3.{25, 25, 0};
        bind_shaders(g_vertex_shader, g_text_pixel_shader);
        bind_texture(g_roboto.texture, 0);
        ff_text(&ff, "Restart: R",     g_roboto, .{0, 0, 0, 1}, cursor - Vector3.{-1, 1, 0}, 1);
        ff_text(&ff, "Restart: R",     g_roboto, .{1, 1, 1, 1}, cursor,                      1);
        cursor.y += g_roboto.pixel_height;
        ff_text(&ff, "Jump:    Space", g_roboto, .{0, 0, 0, 1}, cursor - Vector3.{-1, 1, 0}, 1);
        ff_text(&ff, "Jump:    Space", g_roboto, .{1, 1, 1, 1}, cursor,                      1);
        ff_flush(&ff);
    }

    present_to_screen(true);
    unset_render_targets();
}



proc load_texture_from_file(filename: string, out_texture: ^Texture) : bool {
    w: i32;
    h: i32;
    c: i32;
    texture_data := stbi_load(&filename[0], &w, &h, &c, 4);
    if (texture_data == null) {
        return false;
    }
    assert(c == 4);

    desc: Texture_Description;
    desc.width  = cast(int, w);
    desc.height = cast(int, h);
    desc.format = .R8G8B8A8_UINT;
    desc.type = .TEXTURE2D;
    desc.color_data = texture_data;
    out_texture^ = create_texture(desc);
    return true;
}



proc draw_model(model: Model, position: Vector3, scale: Vector3, orientation: Quaternion, color: Vector4) {
    flush_model_cbuffer(position, scale, orientation, color);

    stride: u32 = sizeof(Vertex);
    offset: u32 = 0;
    bind_vertex_buffers(slice_ptr(&model.vertex_buffer, 1), 0, slice_ptr(&stride, 1), slice_ptr(&offset, 1));
    bind_index_buffer(model.index_buffer, 0);

    for (i := 0; i < model.triangle_list_infos.count; i += 1) {
        info := model.triangle_list_infos[i];
        issue_draw_call(info.first_vertex, info.vertex_count, info.first_index, info.index_count, 0);
    }
}

proc flush_model_cbuffer(position: Vector3, scale: Vector3, orientation: Quaternion, color: Vector4) {
    model_cbuffer: Model_Constant_Buffer;
    model_cbuffer.model = construct_trs_matrix(position, orientation, scale);
    model_cbuffer.color = color;
    update_constant_buffer(g_model_cbuffer_handle, &model_cbuffer, sizeof(Model_Constant_Buffer));
}

proc draw_single_vertex_buffer(buffer: Vertex_Buffer, count: int) {
    stride: u32 = sizeof(Vertex);
    offset: u32 = 0;
    bind_vertex_buffers(slice_ptr(&buffer, 1), 0, slice_ptr(&stride, 1), slice_ptr(&offset, 1));
    issue_draw_call(0, count, 0, 0, 0);
}





proc create_model(vertices: []Vertex, indices: []u32, triangle_list_infos: []Triangle_List_Info, allocator: Allocator) : Model {
    vertex_buffer := create_vertex_buffer(&vertices[0], sizeof(typeof(vertices[0])) * vertices.count);
    index_buffer: Index_Buffer;
    if (indices.count > 0) {
        index_buffer = create_index_buffer(&indices[0], sizeof(typeof(indices[0])) * indices.count);
    }

    m: Model;
    m.triangle_list_infos = new_slice(Triangle_List_Info, triangle_list_infos.count, allocator); copy_slice(m.triangle_list_infos, triangle_list_infos);
    m.vertices = new_slice(Vertex, vertices.count, allocator);
    copy_slice(m.vertices, vertices);
    if (indices.count > 0) {
        m.indices = new_slice(u32, indices.count, allocator);
        copy_slice(m.indices, indices);
    }
    m.vertex_buffer = vertex_buffer;
    m.index_buffer = index_buffer;
    m.allocator = allocator;
    return m;
}

proc create_cube_model(allocator: Allocator) : Model {
    // make cube model
    // u32 cube_indices[36] = {
    //      0,  2,  1,  0,  3,  2,
    //      4,  5,  6,  4,  6,  7,
    //      8, 10,  9,  8, 11, 10,
    //     12, 13, 14, 12, 14, 15,
    //     16, 17, 18, 16, 18, 19,
    //     20, 22, 21, 20, 23, 22,
    // };

    vertices := [36]Vertex.{
        .{.{-0.5, -0.5, -0.5}, .{0, 1, 0}, .{1, 1, 1, 1}}, //{ 0,  0, -1}, { 1,  0,  0}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 0
        .{.{ 0.5,  0.5, -0.5}, .{1, 0, 0}, .{1, 1, 1, 1}}, //{ 0,  0, -1}, { 1,  0,  0}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 2
        .{.{ 0.5, -0.5, -0.5}, .{1, 1, 0}, .{1, 1, 1, 1}}, //{ 0,  0, -1}, { 1,  0,  0}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 1
        .{.{-0.5, -0.5, -0.5}, .{0, 1, 0}, .{1, 1, 1, 1}}, //{ 0,  0, -1}, { 1,  0,  0}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 0
        .{.{-0.5,  0.5, -0.5}, .{0, 0, 0}, .{1, 1, 1, 1}}, //{ 0,  0, -1}, { 1,  0,  0}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 3
        .{.{ 0.5,  0.5, -0.5}, .{1, 0, 0}, .{1, 1, 1, 1}}, //{ 0,  0, -1}, { 1,  0,  0}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 2

        .{.{-0.5, -0.5,  0.5}, .{1, 1, 0}, .{1, 1, 1, 1}}, //{ 0,  0,  1}, {-1,  0,  0}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 4
        .{.{ 0.5, -0.5,  0.5}, .{0, 1, 0}, .{1, 1, 1, 1}}, //{ 0,  0,  1}, {-1,  0,  0}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 5
        .{.{ 0.5,  0.5,  0.5}, .{0, 0, 0}, .{1, 1, 1, 1}}, //{ 0,  0,  1}, {-1,  0,  0}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 6
        .{.{-0.5, -0.5,  0.5}, .{1, 1, 0}, .{1, 1, 1, 1}}, //{ 0,  0,  1}, {-1,  0,  0}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 4
        .{.{ 0.5,  0.5,  0.5}, .{0, 0, 0}, .{1, 1, 1, 1}}, //{ 0,  0,  1}, {-1,  0,  0}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 6
        .{.{-0.5,  0.5,  0.5}, .{1, 0, 0}, .{1, 1, 1, 1}}, //{ 0,  0,  1}, {-1,  0,  0}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 7

        .{.{-0.5, -0.5, -0.5}, .{1, 1, 0}, .{1, 1, 1, 1}}, //{-1,  0,  0}, { 0,  0, -1}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 8
        .{.{-0.5,  0.5,  0.5}, .{0, 0, 0}, .{1, 1, 1, 1}}, //{-1,  0,  0}, { 0,  0, -1}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 10
        .{.{-0.5,  0.5, -0.5}, .{1, 0, 0}, .{1, 1, 1, 1}}, //{-1,  0,  0}, { 0,  0, -1}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 9
        .{.{-0.5, -0.5, -0.5}, .{1, 1, 0}, .{1, 1, 1, 1}}, //{-1,  0,  0}, { 0,  0, -1}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 8
        .{.{-0.5, -0.5,  0.5}, .{0, 1, 0}, .{1, 1, 1, 1}}, //{-1,  0,  0}, { 0,  0, -1}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 11
        .{.{-0.5,  0.5,  0.5}, .{0, 0, 0}, .{1, 1, 1, 1}}, //{-1,  0,  0}, { 0,  0, -1}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 10

        .{.{ 0.5, -0.5, -0.5}, .{0, 1, 0}, .{1, 1, 1, 1}}, //{ 1,  0,  0}, { 0,  0,  1}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 12
        .{.{ 0.5,  0.5, -0.5}, .{0, 0, 0}, .{1, 1, 1, 1}}, //{ 1,  0,  0}, { 0,  0,  1}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 13
        .{.{ 0.5,  0.5,  0.5}, .{1, 0, 0}, .{1, 1, 1, 1}}, //{ 1,  0,  0}, { 0,  0,  1}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 14
        .{.{ 0.5, -0.5, -0.5}, .{0, 1, 0}, .{1, 1, 1, 1}}, //{ 1,  0,  0}, { 0,  0,  1}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 12
        .{.{ 0.5,  0.5,  0.5}, .{1, 0, 0}, .{1, 1, 1, 1}}, //{ 1,  0,  0}, { 0,  0,  1}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 14
        .{.{ 0.5, -0.5,  0.5}, .{1, 1, 0}, .{1, 1, 1, 1}}, //{ 1,  0,  0}, { 0,  0,  1}, { 0,  1,  0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 15

        .{.{-0.5, -0.5, -0.5}, .{1, 1 ,0}, .{1, 1, 1, 1}}, //{ 0, -1,  0}, { 1,  0,  0}, { 0,  0, -1}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 16
        .{.{ 0.5, -0.5, -0.5}, .{0, 1, 0}, .{1, 1, 1, 1}}, //{ 0, -1,  0}, { 1,  0,  0}, { 0,  0, -1}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 17
        .{.{ 0.5, -0.5,  0.5}, .{0, 0, 0}, .{1, 1, 1, 1}}, //{ 0, -1,  0}, { 1,  0,  0}, { 0,  0, -1}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 18
        .{.{-0.5, -0.5, -0.5}, .{1, 1 ,0}, .{1, 1, 1, 1}}, //{ 0, -1,  0}, { 1,  0,  0}, { 0,  0, -1}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 16
        .{.{ 0.5, -0.5,  0.5}, .{0, 0, 0}, .{1, 1, 1, 1}}, //{ 0, -1,  0}, { 1,  0,  0}, { 0,  0, -1}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 18
        .{.{-0.5, -0.5,  0.5}, .{1, 0, 0}, .{1, 1, 1, 1}}, //{ 0, -1,  0}, { 1,  0,  0}, { 0,  0, -1}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 19

        .{.{-0.5,  0.5, -0.5}, .{1, 0, 0}, .{1, 1, 1, 1}}, //{ 0,  1,  0}, { 1,  0,  0}, { 0,  0,  1}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 20
        .{.{ 0.5,  0.5,  0.5}, .{0, 1, 0}, .{1, 1, 1, 1}}, //{ 0,  1,  0}, { 1,  0,  0}, { 0,  0,  1}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 22
        .{.{ 0.5,  0.5, -0.5}, .{0, 0, 0}, .{1, 1, 1, 1}}, //{ 0,  1,  0}, { 1,  0,  0}, { 0,  0,  1}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 21
        .{.{-0.5,  0.5, -0.5}, .{1, 0, 0}, .{1, 1, 1, 1}}, //{ 0,  1,  0}, { 1,  0,  0}, { 0,  0,  1}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 20
        .{.{-0.5,  0.5,  0.5}, .{1, 1, 0}, .{1, 1, 1, 1}}, //{ 0,  1,  0}, { 1,  0,  0}, { 0,  0,  1}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 23
        .{.{ 0.5,  0.5,  0.5}, .{0, 1, 0}, .{1, 1, 1, 1}}, //{ 0,  1,  0}, { 1,  0,  0}, { 0,  0,  1}, {0, 0, 0, 0}, {0, 0, 0, 0}}, // 22
    };

    triangle_list_info: Triangle_List_Info;
    triangle_list_info.first_vertex = 0;
    triangle_list_info.vertex_count = vertices.count;
    triangle_list_info.has_indices  = false;
    model := create_model(to_slice(&vertices), .{}, slice_ptr(&triangle_list_info, 1), allocator);
    return model;
}

proc create_quad_model(allocator: Allocator) : Model {
    vertices := [6]Vertex.{
        .{.{-0.5, -0.5, 0}, .{0, 1, 0}, .{1, 1, 1, 1}},
        .{.{ 0.5,  0.5, 0}, .{1, 0, 0}, .{1, 1, 1, 1}},
        .{.{ 0.5, -0.5, 0}, .{1, 1, 0}, .{1, 1, 1, 1}},
        .{.{-0.5, -0.5, 0}, .{0, 1, 0}, .{1, 1, 1, 1}},
        .{.{-0.5,  0.5, 0}, .{0, 0, 0}, .{1, 1, 1, 1}},
        .{.{ 0.5,  0.5, 0}, .{1, 0, 0}, .{1, 1, 1, 1}},
    };

    triangle_list_info: Triangle_List_Info;
    triangle_list_info.first_vertex = 0;
    triangle_list_info.vertex_count = vertices.count;
    triangle_list_info.has_indices  = false;
    model := create_model(to_slice(&vertices), .{}, slice_ptr(&triangle_list_info, 1), allocator);
    return model;
}



struct Fixed_Function {
    array: ^Dynamic_Array!(Vertex);
    vertex_buffer: Vertex_Buffer;
    current_vertex: ^Vertex;
};

proc ff_begin(ff: ^Fixed_Function, array: ^Dynamic_Array!(Vertex)) {
    ff.array = array;
}

proc ff_end(ff: ^Fixed_Function) {
    ff_flush(ff);
}

proc ff_flush(ff: ^Fixed_Function) {
    if (ff.array.count == 0) {
        return;
    }

    vertex_buffer := create_vertex_buffer(ff.array.elements.data, sizeof(typeof(ff.array^[0])) * ff.array.count);
    flush_model_cbuffer(.{}, .{1, 1, 1}, Quaternion.identity(), .{1, 1, 1, 1});
    draw_single_vertex_buffer(vertex_buffer, ff.array.count);
    destroy_vertex_buffer(vertex_buffer);
    clear_dynamic_array(ff.array);
    ff.current_vertex = null;
}

proc ff_vertex(ff: ^Fixed_Function, position: Vector3) {
    v: Vertex;
    v.position = position;
    ff.current_vertex = append(ff.array, v);
}

proc ff_uv(ff: ^Fixed_Function, uv: Vector3) {
    assert(ff.current_vertex != null);
    ff.current_vertex.uv = uv;
}

proc ff_color(ff: ^Fixed_Function, color: Vector4) {
    assert(ff.current_vertex != null);
    ff.current_vertex.color = color;
}

proc ff_quad_uvs(ff: ^Fixed_Function, min: Vector3, max: Vector3, color: Vector4, uvs: [2]Vector3) {
    ff_vertex(ff, .{min.x, min.y, 0}); ff_uv(ff, .{uvs[0].x, uvs[0].y, uvs[0].z}); ff_color(ff, color);
    ff_vertex(ff, .{min.x, max.y, 0}); ff_uv(ff, .{uvs[0].x, uvs[1].y, uvs[0].z}); ff_color(ff, color);
    ff_vertex(ff, .{max.x, max.y, 0}); ff_uv(ff, .{uvs[1].x, uvs[1].y, uvs[0].z}); ff_color(ff, color);
    ff_vertex(ff, .{max.x, max.y, 0}); ff_uv(ff, .{uvs[1].x, uvs[1].y, uvs[0].z}); ff_color(ff, color);
    ff_vertex(ff, .{max.x, min.y, 0}); ff_uv(ff, .{uvs[1].x, uvs[0].y, uvs[0].z}); ff_color(ff, color);
    ff_vertex(ff, .{min.x, min.y, 0}); ff_uv(ff, .{uvs[0].x, uvs[0].y, uvs[0].z}); ff_color(ff, color);
}

proc ff_quad(ff: ^Fixed_Function, min: Vector3, max: Vector3, color: Vector4) {
    uvs := [2]Vector3.{
        .{0, 1, 0},
        .{1, 0, 0},
    };
    ff_quad_uvs(ff, min, max, color, uvs);
}

proc ff_text(ff: ^Fixed_Function, str: string, font: Font, color: Vector4, start_pos: Vector3, size: float) {
    position: Vector3;
    for (idx := 0; idx < str.count; idx += 1) {
        c := str[idx];
        if (c == '\n') {
            position.x = 0;
            position.y += font.pixel_height * size;
            continue;
        }

        quad: stbtt_aligned_quad;
        stbtt_GetBakedQuad(&font.chars[0], cast(i32, font.dim), cast(i32, font.dim), cast(i32, c), &position.x, &position.y, &quad, 1);//1=opengl & d3d10+,0=d3d9
        x0 := start_pos.x + quad.x0 * size;
        y0 := start_pos.y + quad.y0 * size;
        x1 := start_pos.x + quad.x1 * size;
        y1 := start_pos.y + quad.y1 * size;
        miny := start_pos.y - (y1 - start_pos.y);
        character_height := y1 - y0;
        uvs := [2]Vector3.{
            .{quad.s0, quad.t1, 0},
            .{quad.s1, quad.t0, 0},
        };
        ff_quad_uvs(ff, Vector3.{x0, miny, start_pos.z}, Vector3.{x1, miny + character_height, start_pos.z}, color, uvs);
    }
}

proc get_string_width(str: string, font: Font, size: float) : float {
    position: Vector3;
    highest_x: float;
    for (idx := 0; idx < str.count; idx += 1) {
        c := str[idx];
        if (c == '\n') {
            position.x = 0;
            position.y += font.pixel_height * size;
            continue;
        }
        quad: stbtt_aligned_quad;
        stbtt_GetBakedQuad(&font.chars[0], cast(i32, font.dim), cast(i32, font.dim), cast(i32, c), &position.x, &position.y, &quad, 1);
        highest_x = max(highest_x, position.x);
    }
    return highest_x * size;
}



struct Font {
    texture:      Texture;
    chars:        [128]stbtt_bakedchar;
    dim:          int;
    pixel_height: float;
}

proc load_font_from_file(filename: string, size: float, allocator: Allocator) : Font {
    ttf_data := read_entire_file(filename, allocator);
    if (ttf_data.data == null) {
        print("load_font_from_file() couldn't find file: %\n", filename);
        return .{};
    }
    defer delete_slice(ttf_data, allocator);

    font: Font;
    font.pixel_height = size;
    font.dim = 256;
    pixels: ^byte;
    defer sif_free(pixels, default_allocator());
    tries: int;
    while (true) {
        if (tries >= 5) {
            print("Failed to create font after a bunch of tries.\n");
            assert(false);
        }
        tries += 1;
        // todo(josh): check for max texture size for GPU?

        pixels = cast(^byte, sif_alloc(font.dim * font.dim, DEFAULT_ALIGNMENT, default_allocator()));
        ret := stbtt_BakeFontBitmap(ttf_data.data, 0, size, pixels, cast(i32, font.dim), cast(i32, font.dim), 0, cast(i32, font.chars.count), &font.chars[0]);
        if (ret < 0) {
            sif_free(pixels, default_allocator());
            font.dim = cast(int, cast(float, font.dim) * 1.5);
        }
        else {
            break;
        }
    }

    assert(pixels != null);

    desc: Texture_Description;
    desc.type = .TEXTURE2D;
    desc.width = font.dim;
    desc.height = font.dim;
    desc.format = .R8_UINT;
    desc.wrap_mode = .POINT_CLAMP;
    desc.color_data = pixels;
    font.texture = create_texture(desc);
    return font;
}

proc destroy_font(font: Font) {
    destroy_texture(font.texture);
}