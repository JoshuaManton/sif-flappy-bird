#include "core:basic.sif"
#include "core:dynamic_array.sif"
#include "core:windows.sif"
#include "core:math.sif"
#include "core:directx/d3d11.sif"
#include "core:time.sif"
#include "core:os.sif"
#include "core:random.sif"
#include "core:allocators.sif"

#include "external/stb/stb_image.sif"
#include "external/stb/stb_truetype.sif"

#include "platform.sif"
#include "render_backend.sif"
#include "renderer.sif"

g_temp_allocator: Allocator;

proc main() {
    init_platform();
    window := create_window("My Cool Window", 1920, 1080);
    init_render_backend(&window);

    init_renderer();

    rand: Random_State;
    init_random_state(&rand, 7238723);

    camera: Camera;
    camera.position = Vector3.{0, 0, -10};
    camera.orientation = Quaternion.identity();
    camera.size = 4.5;

    entity_manager: Entity_Manager;
    init_entity_manager(&entity_manager, default_allocator());
    start_gameplay(&entity_manager);

    const ROCK_TIME := 3;

    frame_arena: Arena_Allocator;
    init_arena(&frame_arena, new_slice(byte, 10 * 1024 * 1024, default_allocator()), true);
    g_temp_allocator = arena_to_allocator(&frame_arena);



    game_loop_timer: Timer;
    init_timer(&game_loop_timer);
    game_loop_start_time := get_time(game_loop_timer);
    last_frame_start_time := game_loop_start_time;
    while (!window.should_close) {
        frame_start_time := get_time(game_loop_timer) - game_loop_start_time;
        defer last_frame_start_time = frame_start_time;
        dt := cast(f32, frame_start_time - last_frame_start_time);

        arena_reset(&frame_arena);

        update_window(&window);
        if (get_input(&window.inputs, .ESCAPE)) {
            break;
        }

        if (get_input(&window.inputs, .R)) {
            clear_scene(&entity_manager);
            start_gameplay(&entity_manager);
        }

        if (entity_manager.gameplay_state.game_state == .PLAYING) {
            entity_manager.gameplay_state.cur_rock_time -= dt;
            if (entity_manager.gameplay_state.cur_rock_time <= 0) {
                entity_manager.gameplay_state.cur_rock_time += ROCK_TIME;
                posy := random_f32_range(&rand, -1.75, 1.75);

                difficulty_scaling: float = min(1.0, cast(float, entity_manager.gameplay_state.current_score) / 25);
                gap_size := lerp(3.85, 4.5, 1-difficulty_scaling);

                top    := make_entity(&entity_manager, Rock);
                top.texture = g_rock_top_texture;
                top.position = .{20, posy+gap_size, 1};
                top.scale = Vector3.{1, cast(float, g_rock_top_texture.description.height) / cast(float, g_rock_top_texture.description.width), 1} * 3;

                bottom := make_entity(&entity_manager, Rock);
                bottom.is_bottom_rock = true;
                bottom.texture = g_rock_bottom_texture;
                bottom.position = .{20, posy-gap_size, 1};
                bottom.scale = Vector3.{1, cast(float, g_rock_bottom_texture.description.height) / cast(float, g_rock_bottom_texture.description.width), 1} * 3;
            }
        }

        player := get_entity(&entity_manager, entity_manager.gameplay_state.player);
        background_parallax_1 := get_entity(&entity_manager, entity_manager.gameplay_state.background1);
        background_parallax_2 := get_entity(&entity_manager, entity_manager.gameplay_state.background2);
        foreground_parallax_1 := get_entity(&entity_manager, entity_manager.gameplay_state.foreground1);
        foreground_parallax_2 := get_entity(&entity_manager, entity_manager.gameplay_state.foreground2);

        const BACKGROUND_PARALLAX_SPEED := 0.1;
        background_parallax_1.position.x = lerp(background_parallax_1.scale.x, -background_parallax_1.scale.x, cast(f32, fmod((frame_start_time * BACKGROUND_PARALLAX_SPEED)      , 5) / 5));
        background_parallax_2.position.x = lerp(background_parallax_2.scale.x, -background_parallax_2.scale.x, cast(f32, fmod((2.5 + frame_start_time * BACKGROUND_PARALLAX_SPEED), 5) / 5));

        const FOREGROUND_PARALLAX_SPEED := 1.1;
        foreground_parallax_1.position.x = lerp(foreground_parallax_1.scale.x, -foreground_parallax_1.scale.x, cast(f32, fmod((frame_start_time * FOREGROUND_PARALLAX_SPEED)      , 5) / 5));
        foreground_parallax_2.position.x = lerp(foreground_parallax_2.scale.x, -foreground_parallax_2.scale.x, cast(f32, fmod((2.5 + frame_start_time * FOREGROUND_PARALLAX_SPEED), 5) / 5));

        const ROCK_COLLIDER_WIDTH := 0.05;
        const ROCK_COLLIDER_X_OFFSET := 0.25;

        colliders := make_dynamic_array(Collider_Data, 16, g_temp_allocator);

        //
        for (i := 0; i < entity_manager.all_entities.count; i += 1) {
            entity := &entity_manager.all_entities[i];
            if (entity.id == 0) {
                continue;
            }

            if (entity.kind == Plane) {
                plane := cast(^Plane, entity);
                if (entity_manager.gameplay_state.game_state != .DEAD) {
                    if (get_input_down(&window.inputs, .SPACE)) {
                        entity_manager.gameplay_state.game_state = .PLAYING;
                        plane.velocity.y = 7;
                    }
                }

                if (entity_manager.gameplay_state.game_state != .WAITING_TO_START) {
                    const GRAVITY := 25;
                    plane.velocity.y -= GRAVITY * dt;
                    plane.position = plane.position + (plane.velocity * dt);
                    plane.orientation = axis_angle(.{0, 0, 1}, to_radians(plane.velocity.y * 3));
                }

                tex_idx := cast(int, fmod(frame_start_time * 30, 4));
                if (tex_idx == 0)  plane.texture = g_plane_texture_1;
                if (tex_idx == 1)  plane.texture = g_plane_texture_2;
                if (tex_idx == 2)  plane.texture = g_plane_texture_3;
                if (tex_idx == 3)  plane.texture = g_plane_texture_2;
            }
            else if (entity.kind == Rock) {
                const ROCK_SPEED := 5;
                rock := cast(^Rock, entity);
                rock.position.x -= ROCK_SPEED * dt;

                if (rock.position.x < -20) {
                    destroy_entity(entity);
                    continue;
                }

                append(&colliders, Collider_Data.{.{rock.position.x + ROCK_COLLIDER_X_OFFSET, rock.position.y}, .{ROCK_COLLIDER_WIDTH, rock.scale.y}});
                if (entity_manager.gameplay_state.game_state == .PLAYING) {
                    if (player.position.x - 1 > rock.position.x) {
                        if (!rock.gave_points && rock.is_bottom_rock) {
                            entity_manager.gameplay_state.current_score += 1;
                            rock.gave_points = true;
                        }
                    }
                }
            }
        }

        append(&colliders, Collider_Data.{.{0,  camera.size+2.5}, .{1000, 5.1}});
        append(&colliders, Collider_Data.{.{0, -camera.size-2.5}, .{1000, 5.1}});

        player_collider_size := Vector2.{player.scale.x, player.scale.y} * 0.85;

        if (entity_manager.gameplay_state.game_state == .PLAYING) {
            for (i := 0; i < colliders.count; i += 1) {
                collider := colliders[i];
                if (overlap_rect_rect(.{player.position.x, player.position.y}, player_collider_size, collider.pos, collider.size)) {
                    entity_manager.gameplay_state.game_state = .DEAD;
                }
            }
        }

        // add the player collider to be drawn
        append(&colliders, Collider_Data.{.{player.position.x, player.position.y}, player_collider_size});

        draw_game(&window, &entity_manager, &camera, &colliders);
    }
}

proc start_gameplay(using manager: ^Entity_Manager) {
    gameplay_state = .{};
    player := make_entity(manager, Plane);
    player.position.x = -4;
    player.scale = Vector3.{1, cast(float, g_plane_texture_1.description.height) / cast(float, g_plane_texture_1.description.width), 1};
    player.texture = g_plane_texture_1;

    background_scale := Vector3.{1, cast(float, g_background_texture.description.height) / cast(float, g_background_texture.description.width), 1} * 17;
    foreground_scale := Vector3.{1, cast(float, g_foreground_texture.description.height) / cast(float, g_foreground_texture.description.width), 1} * 17;

    background_parallax_1 := make_entity(manager, Empty_Entity);
    background_parallax_1.position.z = 5;
    background_parallax_1.texture = g_background_texture;
    background_parallax_1.scale = background_scale;
    background_parallax_2 := make_entity(manager, Empty_Entity);
    background_parallax_2.position.z = 5;
    background_parallax_2.texture = g_background_texture;
    background_parallax_2.scale = background_scale;
    foreground_parallax_1 := make_entity(manager, Empty_Entity);
    foreground_parallax_1.position.z = -1;
    foreground_parallax_1.position.y = -4.2;
    foreground_parallax_1.texture = g_foreground_texture;
    foreground_parallax_1.scale = foreground_scale;
    foreground_parallax_2 := make_entity(manager, Empty_Entity);
    foreground_parallax_2.position.z = -1;
    foreground_parallax_2.position.y = -4.2;
    foreground_parallax_2.texture = g_foreground_texture;
    foreground_parallax_2.scale = foreground_scale;

    gameplay_state.player      = player.id;
    gameplay_state.background1 = background_parallax_1.id;
    gameplay_state.background2 = background_parallax_2.id;
    gameplay_state.foreground1 = foreground_parallax_1.id;
    gameplay_state.foreground2 = foreground_parallax_2.id;
}



struct Collider_Data {
    pos: Vector2;
    size: Vector2;
}

struct Camera {
    position: Vector3;
    orientation: Quaternion;
    size: float;
    is_perspective: bool;
}

struct Entity_Manager {
    all_entities: []Entity;
    entities_freelist: Dynamic_Array!(u32);
    num_entities_ever_made: u32;
    gameplay_state: Gameplay_State;
}

enum Game_State {
    WAITING_TO_START;
    PLAYING;
    DEAD;
}

struct Gameplay_State {
    cur_rock_time: float;
    game_state: Game_State;
    current_score: int;
    player: EntityID;
    background1: EntityID;
    background2: EntityID;
    foreground1: EntityID;
    foreground2: EntityID;
}

const EntityID := u64;

struct Entity {
    using derived: union {
        plane: Plane;
    };
    manager: ^Entity_Manager;
    id: EntityID;
    position: Vector3;
    orientation: Quaternion;
    scale: Vector3;
    kind: typeid;
    texture: Texture;
}

struct Plane {
    using base: ^Entity;
    velocity: Vector3;
}

struct Rock {
    using base: ^Entity;
    gave_points: bool;
    is_bottom_rock: bool;
}

struct Empty_Entity {
    using base: ^Entity;
}

proc init_entity_manager(using manager: ^Entity_Manager, allocator: Allocator) {
    const MAX_ENTITIES := 1024;
    all_entities = new_slice(Entity, MAX_ENTITIES, allocator);
    entities_freelist = make_dynamic_array(u32, MAX_ENTITIES, allocator);
    for (i := MAX_ENTITIES-1; i >= 0; i -= 1) {
        append(&entities_freelist, cast(u32, i));
    }
}

proc make_entity(using manager: ^Entity_Manager, $Type: typeid) : ^Type {
    num_entities_ever_made += 1;
    slot := pop(&entities_freelist);
    id := encode_entity_id(slot, num_entities_ever_made);

    base := &all_entities[cast(int, slot)];
    zero_pointer(base, sizeof(Entity));
    base.id = id;
    base.orientation = Quaternion.identity();
    base.scale = .{1, 1, 1};
    base.manager = manager;
    base.kind = Type;
    t := cast(^Type, &base.derived);
    t.base = base;
    return t;
}

proc destroy_entity(entity: ^Entity) {
    entity.id = 0;
}

proc clear_scene(using manager: ^Entity_Manager) {
    for (i := 0; i < all_entities.count; i += 1) {
        if (all_entities[i].id != 0) {
            append(&entities_freelist, cast(u32, i));
            all_entities[i].id = 0;
        }
    }
}

proc encode_entity_id(idx: u32, gen: u32) : EntityID {
    id := cast(u64, idx) << 32 | cast(u64, gen);
    return cast(EntityID, id);
}

proc decode_entity_id(id: EntityID, out_idx: ^u32, out_gen: ^u32) {
    out_idx^ = cast(u32, id >> 32);
    out_gen^ = cast(u32, id);
}

proc get_entity(using manager: ^Entity_Manager, id: EntityID) : ^Entity {
    idx: u32;
    gen: u32;
    decode_entity_id(id, &idx, &gen);
    entity := &all_entities[cast(int, idx)];
    if (entity.id != id) {
        return null;
    }
    return entity;
}

proc get_entity_typed(using manager: ^Entity_Manager, id: EntityID, $T: typeid) : ^T {
    entity := get_entity(gameboard, id);
    if (entity == null) {
        return null;
    }
    if (entity.kind != T) {
        return null;
    }
    return cast(^T, entity);
}



proc overlap_rect_rect(pos1: Vector2, size1: Vector2, pos2: Vector2, size2: Vector2) : bool {
    left1  := pos1.x - (size1.x / 2);
    right1 := pos1.x + (size1.x / 2);
    bottom1 := pos1.y - (size1.y / 2);
    top1    := pos1.y + (size1.y / 2);

    left2  := pos2.x - (size2.x / 2);
    right2 := pos2.x + (size2.x / 2);
    bottom2 := pos2.y - (size2.y / 2);
    top2    := pos2.y + (size2.y / 2);

    return left1 < right2 && right1 > left2 && top1 > bottom2 && bottom1 < top2;
}



proc construct_camera_projection_matrix(camera: ^Camera, aspect: float) : Matrix4 {
    if (camera.is_perspective) {
        return construct_perspective_matrix(to_radians(camera.size), aspect, 0.01, 1000);
    }
    else {
        return construct_orthographic_matrix(-camera.size * aspect, camera.size * aspect, -camera.size, camera.size, -100, 100);
    }
}

proc get_mouse_world_position(camera: ^Camera, camera_aspect: float, mouse_position_unit: Vector2) : Vector3 {
    viewport := unit_to_viewport(Vector3.{mouse_position_unit.x, mouse_position_unit.y, 0});
    cursor_viewport_position := Vector4.{viewport.x, viewport.y, viewport.z, 1};

    proj := construct_camera_projection_matrix(camera, camera_aspect);
    view := construct_view_matrix(camera.position, camera.orientation);
    inv  := Matrix4.inverse(proj * view);

    cursor_world_position4 := inv * cursor_viewport_position;
    if (cursor_world_position4.w != 0) {
        cursor_world_position4 = cursor_world_position4 / cursor_world_position4.w;
    }
    cursor_world_position := Vector3.{cursor_world_position4.x, cursor_world_position4.y, cursor_world_position4.z};
    return cursor_world_position;
}

proc get_mouse_direction_from_camera(camera: ^Camera, camera_aspect: float, mouse_position_unit: Vector2) : Vector3 {
    if (!camera.is_perspective) {
        return Quaternion.forward(camera.orientation);
    }

    cursor_world_position := get_mouse_world_position(camera, camera_aspect, mouse_position_unit);
    cursor_direction := Vector3.normalize(cursor_world_position - camera.position);
    return cursor_direction;
}

proc unit_to_viewport(a: Vector3) : Vector3 {
    result := (a * 2) - Vector3.{1, 1, 0};
    return result;
}
